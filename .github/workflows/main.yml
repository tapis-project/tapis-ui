name: CI

on:
  push:
    tags: ['v*.*.*']
    branches: [dev, staging, test, release-**]
  pull_request:
    branches: [dev, staging, test, release-**]
  workflow_dispatch:

jobs:
  Client_Side_Unit_Tests:
    runs-on: ubuntu-22.04
    steps:
      - name: checkout git repo
        uses: actions/checkout@v4
      - name: install pnpm
        uses: pnpm/action-setup@v4
      - name: setup Node.js for use with actions
        uses: actions/setup-node@v4
        with:
          node-version: 22.4.x
          cache: 'pnpm'
      - name: install packages
        run: pnpm install --frozen-lockfile
      - name: run tests
        run: pnpm run test
  #    - name: Upload coverage to Codecov
  #      run: bash <(curl -s https://codecov.io/bash) -Z -t ${{ secrets.CODECOV_TOKEN }} -cF javascript

  Client_Side_Linting:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - name: install pnpm
        uses: pnpm/action-setup@v4
      - name: setup Node.js for use with actions
        uses: actions/setup-node@v4
        with:
          node-version: 22.4.x
          cache: 'pnpm'
      - name: install packages
        run: pnpm install --frozen-lockfile
      - name: Client Side Linting
        run: pnpm run lint

  Resolve_Image_Tag:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.set_image_tag.outputs.image_tag }}
    steps:
      - name: Extract_Branch_Name
        # Map a step output to a job output
        shell: bash
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/v* ]]; then
            echo "is_tag=true" >> $GITHUB_OUTPUT
            echo "tag_name=$(echo ${GITHUB_REF#refs/tags/v})" >> $GITHUB_OUTPUT
          else
            echo "is_tag=false" >> $GITHUB_OUTPUT
            echo "branch_name=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
          fi
        id: extract_branch
      - name: Check_Is_Production_Release
        id: check_is_production_release
        shell: bash
        run: |
          if [ "${{ steps.extract_branch.outputs.is_tag }}" = true ]; then
            echo "is_production_release=true" >> $GITHUB_OUTPUT;
          elif [ "${{ contains(steps.extract_branch.outputs.branch_name, 'release-') }}" = true ]; then
            echo "is_production_release=true" >> $GITHUB_OUTPUT;
          else
            echo "is_production_release=false" >> $GITHUB_OUTPUT;
          fi
      - name: Extract Production Release Version
        if: ${{ steps.check_is_production_release.outputs.is_production_release == 'true' }}
        shell: bash
        run: echo version=$(echo ${{ steps.extract_branch.outputs.branch_name }} | sed -e 's!release-!!') >> $GITHUB_OUTPUT
        id: extract_version
      - name: Extract_Image_Tag
        shell: bash
        run: |
          if [ "${{ steps.extract_branch.outputs.is_tag }}" == true ]; then
            echo "image_tag=${{ steps.extract_branch.outputs.tag_name }}" >> $GITHUB_OUTPUT;
          elif [ "${{ steps.check_is_production_release.outputs.is_production_release }}" == true ]; then
            echo "image_tag=${{ steps.extract_version.outputs.version }}" >> $GITHUB_OUTPUT;
          else
            echo "image_tag=${{ steps.extract_branch.outputs.branch_name }}" >> $GITHUB_OUTPUT;
          fi
        id: set_image_tag

  Build_Push_Image:
    needs:
      - Resolve_Image_Tag
      - Client_Side_Linting
      - Client_Side_Unit_Tests
    runs-on: ubuntu-latest
    name: Build_Push_Image
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.TAPIS_DOCKERHUB_USERNAME }}
          password: ${{ secrets.TAPIS_DOCKERHUB_ACCESS_TOKEN }}
      - name: Build_Tapis_UI_Image
        run: |
          BRANCH="${{ needs.Resolve_Image_Tag.outputs.image_tag }}"
          if [ "${{ contains(needs.Resolve_Image_Tag.outputs.image_tag, 'refs/pull/') }}" == true ]; then
            BRANCH=dev
          fi
          docker build -f Dockerfile.nix -t tapis/tapisui:$BRANCH .
      - name: Push_All_Tags
        run: docker push --all-tags tapis/tapisui
